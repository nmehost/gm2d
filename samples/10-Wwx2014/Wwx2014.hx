import nme.display.Sprite;
import nme.display.DisplayObject;
import nme.display.Bitmap;
import nme.display.BitmapData;
import nme.geom.Point;
import nme.geom.Rectangle;
import nme.text.TextField;
import nme.text.TextFormat;
import nme.text.TextFieldAutoSize;
import nme.filters.GlowFilter;
import gm2d.ui.Layout;
import nme.Assets;


@:keep
class Wwx2014 extends Talk
{
   public function new()
   {
      super();
      defaultTextColour = 0x000000;
      bulletBmp = Assets.getBitmapData("Bullet.png");
   }

   @:keep
   public function renderScreen0()
   {
      var layout = new VerticalLayout();
      var particles = new Particles(stage.stageWidth, stage.stageHeight);
      addChild(particles);

      var fmt = new TextFormat();
      fmt.font = "courier";
      fmt.size = Std.int(24*guiScale);
      fmt.color = 0xffffff;
      var text = new TextField();
      text.defaultTextFormat = fmt;
      text.autoSize = TextFieldAutoSize.LEFT;
      text.text=[
      ("/\\ \\                                      "),
      ("\\ \\ \\___    __  _   ___   _____   _____   "),
      (" \\ \\  _ `\\ /\\ \\/'\\ /'___\\/\\ '__`\\/\\ '__`\\ "),
      ("  \\ \\ \\ \\ \\\\/>  <//\\ \\__/\\ \\ \\L\\ \\ \\ \\L\\ \\"),
      ("   \\ \\_\\ \\_\\/\\_/\\_\\ \\____\\\\ \\ ,__/\\ \\ ,__/"),
      ("    \\/_/\\/_/\\//\\/_/\\/____/ \\ \\ \\/  \\ \\ \\/ "),
      ("                            \\ \\_\\   \\ \\_\\ "),
      ("                             \\/_/    \\/_/"),""].join("\n");
      addChild(text);
      layout.add(new DisplayLayout(text));

      fmt.font = "_sans";
      fmt.size = Std.int(128*guiScale);
      fmt.color = 0x000000;
      var text = new TextField();
      text.defaultTextFormat = fmt;
      text.autoSize = TextFieldAutoSize.LEFT;
      text.text="magic";
      addChild(text);
      layout.add(new DisplayLayout(text));
 
      layout.onLayout = function(_,_,_,_) particles.setDisplaySource(text);

      setLayout(layout);

      update = particles.update;
   }
 
   function drawBg()
   {
      var sw = stage.stageWidth;
      var sh = stage.stageHeight;
      var gfx = graphics;
      gfx.beginFill(0xf0f0f0);
      gfx.drawRect(0,0,sw,sh);

      gfx.beginFill(0xffffff);
      gfx.lineStyle(1,0x3030ff);
      gfx.drawRect(10.5,20.5,sw-21,sh-41);
   }


   public function renderScreen2()
   {
      drawBg();
      var layout = createTitle('Magic',36);
      bullet(layout,"The power of apparently influencing events by\n   using mysterious or supernatural forces");
      bullet(layout,"Sometimes low-level libraries need to access\n   platform-specific magic functions");
      bullet(layout,"Add include paths and libraries (Build.xml)",2);
      bullet(layout,"Inject code into generated output (untyped)",2);
      bullet(layout,"Create extern definitions (meta-data)",2);
      setLayout(layout);
 
   }




   public function renderScreen5()
   {
      var sw = stage.stageWidth;
      var sh = stage.stageHeight;
      var gfx = graphics;
      gfx.beginFill(0xffffff);
      gfx.drawRect(0,0,sw,sh);

      var bmp = Assets.getBitmapData("BuildMagic.jpg");
      var s = 2.0 * guiScale;
      var glow = new GlowFilter(0x000000, 1.0, s, s, 3, 3, false, false);
      setLayout( createImage(bmp, "Build Magic", 64, 0xffff00, glow ) );

   }

   public function renderScreen10()
   {
      drawBg();
      var layout = createTitle('Hxcpp Build.xml - Just "Stage" Magic',36);
      bullet(layout,"No build system is magic");
      bullet(layout,"Ant/make/cmake/scon/gyp - not magic",2);
      bullet(layout,"Nothing but conjuror of cheap tricks:");
      bullet(layout,"Compiler/Linker flags",2);
      bullet(layout,"List of files and dependencies",2);
      bullet(layout,"Direct solution to this problem");
      bullet(layout,"Only depends on Neko");

      setLayout(layout);
   }



   public function renderScreen20()
   {
      drawBg();
      var layout = createTitle("Build.xml");
      bullet(layout,"Generated by haxe in 'bin' directory");
      bullet(layout,"You can run it without haxe from bin directory");
      codePoint(layout,'${green}cd${o} bin; ${green}haxelib${o} run hxcpp Build.xml...',2);
      bullet(layout,"Good way to explore cpp code too",2);
      bullet(layout,"Create one for your own project");
      bullet(layout,"Easily support all hxcpp targets",2);
      bullet(layout,"Compatible flags (ndll/lib/exe)",2);

      setLayout(layout);
   }

   public function renderScreen30()
   {
      drawBg();
      var layout = createTitle("Controlling Build.xml");

      var items = new VerticalLayout().setAlignment(Layout.AlignTop|Layout.AlignLeft);
      addOption( bullet(items,"Environment") );
      addOption( bullet(items,"Defines") );
      addOption( bullet(items,"Toolchains") );

      var hlayout = new HorizontalLayout();
      hlayout.add(items);
      var codeBox = createCodeBox("");
      hlayout.add(codeBox.layout);

      layout.add(hlayout);

      onOption = function(id:Int)
      {

         var lines = [
            ['${grey}c:\\haxe>${o} ${green}set${o} HXCPP_VERBOSE=1\n',
             '${grey}tcsh>${o} ${green}setenv${o} HXCPP_LOAD_DEBUG 1\n',
             '${grey}bash$ ${o}${green}export${o} HXCPP_CONFIG=myconfig.xml\n',
             '${white}Permanent changes:${o}',
             '* Edit ~/.login',
             '* Search windows for "environment"'
             ],
            ['${green}haxe${o} compile.hxml ${white}-D${o} HXCPP_CHECK_POINTER\n',
             '${green}haxelib${o} run hxcpp ${white}-D${o}HXCPP_M64\n',
             '${white}.hxcpp_config.xml:${o}',
             '&lt;${xm}xml${o}>',
             '  &lt;${xm}section${o} ${xa}id${o}="vars"\\>',
             '  &lt;${xm}set${o} ${xa}name${o}="SDK_ROOT" ${xa}value${o}="e:/SDKs/" />',
             "  ..."
             ],
            ['${green}haxe${o} compile.hxml -lib myToolchain\n',
             '${white}myToolchain/toolchain/setup.xml${o}',
             '&lt;${xm}xml${o}>',
             '  &lt;${xm}set${o} ${xa}name${o}="toolchain" ${xa}value${o}="myFile"/>',
             '  &lt;${xm}include${o} ${xa}name${o}="$${HXCPP_CONFIG}" ${xa}section${o}="vars" ${xa}noerror${o}="1"/>',
             '&lt;/${xm}xml${o}>\n',
             '${white}myToolchain/toolchain/myFile.xml${o}',
             '&lt;${xm}xml${o}>',
             '  ...'
            ],
        ];
         codeBox.setText(lines[id].join("\n"));
      };

      setLayout(layout);
   }



   public function renderScreen65()
   {
      var sw = stage.stageWidth;
      var sh = stage.stageHeight;
      var gfx = graphics;
      gfx.beginFill(0x000000);
      gfx.drawRect(0,0,sw,sh);

      var bmp = Assets.getBitmapData("Level1.jpg");
      var s = 2.0 * guiScale;
      var glow = new GlowFilter(0x000000, 1.0, s, s, 3, 3, false, false);
      setLayout( createImage(bmp, "Level 1 Magic", 64, 0xffff00, glow ) );

   }



   public function renderScreen70()
   {
      drawBg();
      var layout = createTitle("Level 1 Magic - untyped");

      var items = new VerticalLayout().setAlignment(Layout.AlignTop|Layout.AlignLeft);
      addOption( bullet(items,'untyped') );
      addOption( bullet(items,'__global__') );
      addOption( bullet(items,'__cpp__(" ")') );

      var hlayout = new HorizontalLayout();
      hlayout.add(items);
      var codeBox = createCodeBox("");
      hlayout.add(codeBox.layout);

      layout.add(hlayout);


      onOption = function(id:Int)
      {
         var lines = [
            [
              '* Skips "most" type checking, but still needs valid syntax',
              '* Interface between haxe and external code',
              '* use with __global__ and __cpp__',
            ],
            [
             '__global__ == ::\n',
             'useful because haxe does not have global namespace\n',
             'untyped __global__.MessageBox(0,"Hello","Title",0);',
             'Works because',
             '   windows.h is included (on windows)',
             '   0 = null pointer',
             '   "Hello" = Auto-cast from haxe string',
            ],
            [
             '__cpp__(\'printf("Hello")\');\n',
             '-  parses as local function call',
             '-  anything goes',
             '-  but it is text substitution - so:',
             '  *   keyword substitution fails',
             '  *   inline fails'
             ],
        ];
         codeBox.setText(colour(lines[id].join("\n")));
      };

      setLayout(layout);
   }


   public function renderScreen71()
   {
      drawBg();
      var layout = createTitle("Level 1 Magic - cpp package");

      var items = new VerticalLayout().setAlignment(Layout.AlignTop|Layout.AlignLeft);
      addOption( bullet(items,'cpp.NativeArray') );
      addOption( bullet(items,'cpp.String') );
      addOption( bullet(items,'cpp.Float32') );
      addOption( bullet(items,'cpp.UInt8/...') );

      var hlayout = new HorizontalLayout();
      hlayout.add(items);
      var codeBox = createCodeBox("");
      hlayout.add(codeBox.layout);

      layout.add(hlayout);


      onOption = function(id:Int)
      {
         var lines = [

            ['using cpp.NativeArray;\n',
             'var array = new Array&lt;Int>();',
             'array.unsafeSet(10,1);',
             'var a = array.unsafeGet(10);',
             'array.zero();',
            ],
            ['using cpp.NativeString;\n',
             'trace("hello".c_str().at(1));',
            ],
 
            ['import cpp.Float32;\n',
             'var f = new Array&lt;Float>();',
             'trace( untyped __cpp__("(int)sizeof({0})",f[0]) );',
             'var f = new Array&lt;Float32>();',
             'trace( untyped __cpp__("(int)sizeof({0})",f[0]) );',
             '// 8, 4',
            ],

            ['import cpp.UInt8;\n',
             'var array = new Array&lt;UInt8>();',
             'array[0]=257;',
             'trace(array[0]);',
             '// 1'
            ],


        ];
         codeBox.setText(colour(lines[id].join("\n")));
      };

      setLayout(layout);
   }






   public function renderScreen75()
   {
      var sw = stage.stageWidth;
      var sh = stage.stageHeight;
      var gfx = graphics;
      gfx.beginFill(0x000000);
      gfx.drawRect(0,0,sw,sh);

      var bmp = Assets.getBitmapData("Level2.jpg");
      var s = 2.0 * guiScale;
      var glow = new GlowFilter(0x000000, 1.0, s, s, 3, 3, false, false);
      setLayout( createImage(bmp, "Level 2 - Meta Magic", 64, 0xffff00, glow ) );

   }


   public function renderScreen80()
   {
      drawBg();
      var layout = createTitle("Level 2 - Meta Magic");
      //bullet(layout,'Injecting code with meta data');
      var items = new VerticalLayout().setAlignment(Layout.AlignTop|Layout.AlignLeft);
      addOption( bullet(items,'Class meta') );
      addOption( bullet(items,'Function meta') );
      addOption( bullet(items,'@:buildXml') );

      var hlayout = new HorizontalLayout();
      hlayout.add(items);
      var codeBox = createCodeBox("");
      hlayout.add(codeBox.layout);

      layout.add(hlayout);


      onOption = function(id:Int)
      {
         var lines = [
           [
              'Text, so anything goes\n',
              '@:headerClassCode(...);',
              ' -> inject member variables/inline functions\n',
              '@:headerCode(...);',
              ' -> include external headers\n',
              '@:headerNamespaceCode(...);',
              ' -> declare globals in namespaces\n',
              '@:cppFileCode(...);',
              ' -> include external headers only in cpp file\n',
              '@:cppNamespaceCode(...);',
              ' -> implement static variables\n',
            ],
             [
             '@:functionCode(...);',
             '@:functionTailCode(...);\n',
             'Largely redundant (use __cpp__)'
             ],
            [
             "@:buildXml('",
             '  &lt;target id="haxe">',
             "    &lt;lib name=\"${HXCPP}/lib/${BINDIR}/libstd${LIBEXTRA}${LIBEXT}\"/>",
             '    &lt;lib name="wsock32.lib" if="windows"/>',
             '  &lt;/target>',
             "  ')",
             '@:keep class StaticStd',
             '',
             'Or, use one &lt;include/>\n',
             '@:buildXml("',
             "&&lt;include name='${haxelib:nme}/lib/NmeLink.xml'/>",
             '")',
             '@:keep class StaticNme'
            ],
 
         ];
         codeBox.setText(colour(lines[id].join("\n")));
      };

      setLayout(layout);
   }

   public function renderScreen85()
   {
      var sw = stage.stageWidth;
      var sh = stage.stageHeight;
      var gfx = graphics;
      gfx.beginFill(0x000040);
      gfx.drawRect(0,0,sw,sh);

      var bmp = Assets.getBitmapData("Level3.jpg");
      var s = 2.0 * guiScale;
      var glow = new GlowFilter(0x000000, 1.0, s, s, 3, 3, false, false);
      setLayout( createImage(bmp, "Level 3 - Extern Magic", 64, 0xffff00, glow ) );

   }




   public function renderScreen90()
   {
      drawBg();
      var layout = createTitle("Level 3 - Extern Magic");
      //bullet(layout,'Integrating with extenal code');
      var items = new VerticalLayout().setAlignment(Layout.AlignTop|Layout.AlignLeft);
      addOption( bullet(items,'cpp.Pointer') );
      addOption( bullet(items,'extern class') );
      addOption( bullet(items,'Pointer hacks') );
      addOption( bullet(items,'CFFI data') );

      var hlayout = new HorizontalLayout();
      hlayout.add(items);
      var codeBox = createCodeBox("");
      hlayout.add(codeBox.layout);

      layout.add(hlayout);


      onOption = function(id:Int)
      {
         var lines = [
            [
               'import cpp.Pointer;',
               '  * value, at, add, less than ...',
               '  * Pointer to external class',
               '  * Pointer to haxe variable (with care)',
               '  * Be carful - does not hold GC reference\n',
               'import cpp.Function',
               '  * Pointer to static function (not closure)\n',
               'var array=[1,2,3];',
               'var intPtr = Pointer.arrayElem(array,1);',
               'trace(intPtr.value);',
               'trace(intPtr.add(1).value);',
               '// 2,3\n',
            ],
 
            [
              '@:include("string")',
              '@:structAccess',
              '@:unreflective',
              '@:native("std::string")',
              'extern class StdString {',
              '   @:native("new std::string");',
              '   public static function create(inString:String):cpp.Pointer&lt;StdString>;',
              '   public function size():Int;',
              '   public function find(str:String):Int;',
              '}',
              '',
              'var std = StdString.create("My std::string");',
              'trace(std.value.size());',
              'std.destroy();',
              '\n Warning - non-Pointer version suitable for member variable'
            ],
 
           [
               'public static function f_inv_square( number:Float ) : Float {',
               '   var y:Float32  = number;',
               '   var intPtr:Pointer&lt;Int> = Pointer.addressOf(y).reinterpret();',
               '   intPtr.ref = 0x5f3759df - ( intPtr.ref >> 1 );',
               '   var result = y* ( 1.5 - ( number*0.5 * y * y ) );',
               '   trace(result + " =~ " + Math.sqrt(1.0/number));',
               '   return result;',
              '}\n',
              'f_inv_square(0.03); // 5.769970009 =~ 5.773502692',
              'f_inv_square(1.44); // 0.8323822754 =~ 0.8333333333',
              'f_inv_square(3.99); // 0.4997806803 =~ 0.5006261743',
              'f_inv_square(201);  // 0.0705052865 =~ 0.07053456159'
            ],
           [
              'Five point plan for direct access to structures\nallocated with "alloc_abstract"\n',
              '1 Define externs',
              '  extern class MyData { }\n',
              '2 Force inclusion of header',
              "  @:buildXml( ... -I${haxelib:mylib})",
              '  @:include("mylib.h")\n',
              '3 Add link libraries',
              "  @:buildXml( ... &lt;lib> )",
              "  OR use virtual functions",
              '  struct MyData {',
              '     virtual void someFunc();\n',
              '4 Extract pointer from abstract handle:',
              '   var myData:Pointer&lt;MyData> = ',
              '      Pointer.fromHandle(handle)\n',
              '5 Use:',
              '   myData.value.someFunc();'
            ]

         ];
         codeBox.setText(colour(lines[id].join("\n")));
      };

      setLayout(layout);
   }


   public function renderScreen95()
   {
      var sw = stage.stageWidth;
      var sh = stage.stageHeight;
      var gfx = graphics;
      gfx.beginFill(0x000000);
      gfx.drawRect(0,0,sw,sh);

      var bmp = Assets.getBitmapData("Level4.jpg");
      var s = 2.0 * guiScale;
      var glow = new GlowFilter(0x000000, 1.0, s, s, 3, 3, false, false);
      setLayout( createImage(bmp, "Level 4 - Necromancy", 64, 0xffff00, glow ) );

   }

   public function renderScreen100()
   {
      drawBg();
      var layout = createTitle("Level 4 - Necromancy");
      //bullet(layout,'Integrating with extenal code');
      var items = new VerticalLayout().setAlignment(Layout.AlignTop|Layout.AlignLeft);
      addOption( bullet(items,'finalizer') );
      addOption( bullet(items,'zombies') );

      var hlayout = new HorizontalLayout();
      hlayout.add(items);
      var codeBox = createCodeBox("");
      hlayout.add(codeBox.layout);

      layout.add(hlayout);

      onOption = function(id:Int)
      {
         var lines = [
            [
              'class Test {',
              '   var handle:String;',
              '   public function new() {',
              '      handle = "free me";',
              '      cpp.vm.Gc.setFinalizer(this,cpp.Function.fromStaticFunction(destroy));',
              '   }',
              '',
              '   @:void public static function destroy(inTest:Test): Void {',
              "      untyped __cpp__('printf(\"Free %s\\\\n\", inTest->handle.__s)');",
              '   }',
              '',
              '   static function createLeak() {',
              '      for(i in 0...10)',
              '         new Test();',
              '   }',
              '',
              '   public static function main() {',
              '      createLeak();',
              '      cpp.vm.Gc.run(true);',
              '   }',
              '}',
               " * Can't make GC calls",
               " * Wrong thread",
            ],
            [
               'class Test {',
               '   var handle:String;',
               '   public function new() {',
               '      handle = "free me";',
               '      cpp.vm.Gc.doNotKill(this);',
               '   }',
               '   public static function destroy(inTest:Test): Void {',
               '      trace("Free " +  inTest);',
               '   }',
               '   static function createLeak() {',
               '      for(i in 0...10)',
               '         new Test();',
               '   }',
               '   public static function main() {',
               '      createLeak();',
               '      cpp.vm.Gc.run(true);',
               '      while(true) {',
               '         var zombie = cpp.vm.Gc.getNextZombie();',
               '         if (zombie==null)',
               '            break;',
               '         if (Std.is(zombie,Test))',
               '            destroy(zombie);',
               '      }',
               '   }',
               '}',
               '* Control the timing (correct thread)',
               '* Can "reanimate"',
               '* Can call Gc function',
               '* Might be delayed (next "ENTER_FRAME")',
            ]
         ];
         codeBox.setText(colour(lines[id].join("\n")));
      };

      setLayout(layout);
   }



   public function renderScreen120()
   {
      drawBg();
      var layout = createTitle("Scorecard from 2 years ago...");
      bullet(layout,"Hit");
      bullet(layout,"Long Outstanding Issue (left-to-right)",2);
      bullet(layout,"New features/new compilers",2);
      bullet(layout,"Multi-threaded, defrag/moving GC",2);
      bullet(layout,"Integrated Debugger",2);

      setLayout(layout);
   }

   public function renderScreen130()
   {
      drawBg();
      var layout = createTitle("Scorecard from 2 years ago...");
      bullet(layout,"Miss");
      bullet(layout,"Strong function typing (partial hit)",2);
      bullet(layout,"Numeric template specializations (fast Int List)",2);
      bullet(layout,"Fake classes and interfaces from Anon types",2);
      bullet(layout,"Testing - Code coverage",2);
      bullet(layout,"Debugging - Graphical memory view",2);

      setLayout(layout);
   }


   public function renderScreen140()
   {
      drawBg();
      var layout = createTitle("Future");
      bullet(layout,"Still considering:");
      bullet(layout,"Numeric template specializations",2);
      bullet(layout,"Fake classes and interfaces",2);
      bullet(layout,"Concurrent GC?");
      bullet(layout,"More native integration");
      bullet(layout,"Maybe steal other languages externs",2);
      bullet(layout,"Fully native int64");
      setLayout(layout);
   }


   public function renderScreen150()
   {
      drawBg();
      var layout = createTitle("Demo");

      var lines = [
         "var src = ImageBuffer.fromBitmapData(camera.bitmapData);",
         "var offset = src.value.GetStride() * y;",
         "var srcPtr = src.value.GetBase();",
         "var s:ConstPointer&lt;ARGB> = srcPtr.add(offset).reinterpret();",
         "",
         "for(x in x0...x1)",
         "{",
         "   var argb = s.at(x);",
         "   var dr = r-argb.r;",
         "   var dg = g-argb.g;",
         "   var db = b-argb.b;"
      ];

      var codeBox = createCodeBox("");
      codeBox.setText(colour(lines.join("\n")));

      layout.add(codeBox.layout.stretch());
      setLayout(layout);
   }


   public function renderScreen160()
   {
      drawBg();
      var set = false;
      #if cpp
      var sw = stage.stageWidth;
      var sh = stage.stageHeight;
      var game = new game.Game(sw-20, sh-40);
      if (game.ok())
      {
         set = true;
         game.x = 10;
         game.y = 20;
         addChild(game);
      }
      #end
      if (!set)
      {
         #if cpp
         var layout = createTitle("Not available on this architecture");
         #else
         var layout = createTitle("Only available for Cpp target");
         #end
         setLayout(layout);
      }
   }


}


